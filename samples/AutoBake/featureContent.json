[
  {
    "url": "https://chromestatus.com/feature/6247948082216960",
    "content": [
      "                                          A high-performance Canvas 2D triangle mesh API that can be used to batch-render a large number of textured triangles.This will enable advanced texture mapping and geometry deformation effects in a 2D context.                                      Motivation          Triangle meshes are a fundamental building block of most low-level graphics APIs, and their rendering is heavily optimized on modern hardware. They can represent complex geometries, and provide an efficient mechanism for texture mapping and morphing.Mapping textures to arbitrary geometries is of great importance to animation engines (e.g. Lottie, Rive), both as a direct animation mechanism and as an utility for implementing various morphological effects. Since Canvas2D does not currently support drawing triangle meshes, such animation engines are either resorting to inefficient workarounds or limiting the set of supported features on the web.                                      Demos and samples                                                              Title:      Mesh2D                        File:        spec/mesh2d.md                        Size:      7.47 KB                                        Markdown: Mesh2D                                        https://demos.skia.org/demo/mesh2d                                                                  Explainer(s)                                    Title:      Mesh2D                        File:        spec/mesh2d.md                        Size:      7.47 KB                                        Markdown: Mesh2D                                                        Status in Chromium                              Blink components:                          Blink>Canvas                                                        Implementation status:          No active development                                    Summary:      Implement Mesh2D Canvas API                        Opened:        Monday, September 25, 2023 at 2:37 PM                                Reporter:        fmalita@chromium.org                                Owner:          fmalita@chromium.org                                            Started          Implement Mesh2D Canvas API                                                    Consensus & Standardization        After a feature ships in Chrome, the values listed here are not guaranteed to be up to date.                                                    Firefox:                              No signal                                                                        Safari:                              No signal                                              Web Developers: No signals                                      Owner                                    fmalita@chromium.org                                                                        Search tags                                                        History          Entry created on          2023-09-13 13:14:32                        (         )                Last updated on          2023-09-25 14:48:32                        (         )                            All comments & activity                                  ",
      "                    Skip to content                            {\"props\":{}}  {\"resolvedServerColorMode\":\"day\"}                                Toggle navigation                                                        Sign in                                                                                                                                    Product                                                                                        Actions        Automate any workflow                                                    Packages        Host and manage packages                                                    Security        Find and fix vulnerabilities                                                    Codespaces        Instant dev environments                                                    Copilot        Write better code with AI                                                    Code review        Manage code changes                                                    Issues        Plan and track work                                                    Discussions        Collaborate outside of code                                                        Explore                                    All features                            Documentation                                GitHub Skills                                Blog                                                                  Solutions                                                For                                    Enterprise                            Teams                            Startups                            Education                                                      By Solution                                    CI/CD & Automation                            DevOps                                DevSecOps                                                      Resources                                    Learning Pathways                                White papers, Ebooks, Webinars                                Customer Stories                            Partners                                                                  Open Source                                                                                    GitHub Sponsors        Fund open source developers                                                                                            The ReadME Project        GitHub community articles                                                        Repositories                                    Topics                            Trending                            Collections                                                    Pricing                                                                                            Search or jump to...                                                      Search code, repositories, users, issues, pull requests...                                                          Search                                                                                                                                Clear                                                                                                                                                    Search syntax tips                                                                      Provide feedback                                                      We read every piece of feedback, and take your input very seriously.                              Include my email address so I can be contacted                    Cancel              Submit feedback                                  Saved searches              Use saved searches to filter your results more quickly                                                                                                Name                                                                                    Query                                            To see all available qualifiers, see our documentation.                                                                Cancel              Create saved search                                          Sign in                                                Sign up                                                            You signed in with another tab or window. Reload to refresh your session.        You signed out in another tab or window. Reload to refresh your session.        You switched accounts on another tab or window. Reload to refresh your session.          Dismiss alert                                                                                                                            fserb        /          canvas2D        Public                                                              Notifications                      Fork    22                                      Star          120                                                                                          Code                                                    Issues          15                                          Pull requests          0                                          Actions                                                    Projects          0                                          Security                                                    Insights                                    Additional navigation options                                                                                            Code                                                                        Issues                                                                        Pull requests                                                                        Actions                                                                        Projects                                                                        Security                                                                        Insights                                            {\"payload\":{\"allShortcutsEnabled\":false,\"fileTree\":{\"spec\":{\"items\":[{\"name\":\"batch-drawimage.md\",\"path\":\"spec/batch-drawimage.md\",\"contentType\":\"file\"},{\"name\":\"color-input.md\",\"path\":\"spec/color-input.md\",\"contentType\":\"file\"},{\"name\":\"conic-curve-to.md\",\"path\":\"spec/conic-curve-to.md\",\"contentType\":\"file\"},{\"name\":\"conic-gradient.md\",\"path\":\"spec/conic-gradient.md\",\"contentType\":\"file\"},{\"name\":\"context-loss.md\",\"path\":\"spec/context-loss.md\",\"contentType\":\"file\"},{\"name\":\"display-list-object.md\",\"path\":\"spec/display-list-object.md\",\"contentType\":\"file\"},{\"name\":\"filters-usage.md\",\"path\":\"spec/filters-usage.md\",\"contentType\":\"file\"},{\"name\":\"filters.md\",\"path\":\"spec/filters.md\",\"contentType\":\"file\"},{\"name\":\"layers.md\",\"path\":\"spec/layers.md\",\"contentType\":\"file\"},{\"name\":\"mesh2d.md\",\"path\":\"spec/mesh2d.md\",\"contentType\":\"file\"},{\"name\":\"perspective-transforms.md\",\"path\":\"spec/perspective-transforms.md\",\"contentType\":\"file\"},{\"name\":\"recording.md\",\"path\":\"spec/recording.md\",\"contentType\":\"file\"},{\"name\":\"reset.md\",\"path\":\"spec/reset.md\",\"contentType\":\"file\"},{\"name\":\"roundrect.md\",\"path\":\"spec/roundrect.md\",\"contentType\":\"file\"},{\"name\":\"shaders.md\",\"path\":\"spec/shaders.md\",\"contentType\":\"file\"},{\"name\":\"text-modifiers.md\",\"path\":\"spec/text-modifiers.md\",\"contentType\":\"file\"},{\"name\":\"webText-background.md\",\"path\":\"spec/webText-background.md\",\"contentType\":\"file\"},{\"name\":\"webText-data-model.md\",\"path\":\"spec/webText-data-model.md\",\"contentType\":\"file\"},{\"name\":\"webText-metrics.md\",\"path\":\"spec/webText-metrics.md\",\"contentType\":\"file\"},{\"name\":\"webgpu.md\",\"path\":\"spec/webgpu.md\",\"contentType\":\"file\"},{\"name\":\"will-read-frequently.md\",\"path\":\"spec/will-read-frequently.md\",\"contentType\":\"file\"}],\"totalCount\":21},\"\":{\"items\":[{\"name\":\"images\",\"path\":\"images\",\"contentType\":\"directory\"},{\"name\":\"mdn-drafts\",\"path\":\"mdn-drafts\",\"contentType\":\"directory\"},{\"name\":\"spec\",\"path\":\"spec\",\"contentType\":\"directory\"},{\"name\":\"va\",\"path\":\"va\",\"contentType\":\"directory\"},{\"name\":\"webgpu\",\"path\":\"webgpu\",\"contentType\":\"directory\"},{\"name\":\"LICENSE.md\",\"path\":\"LICENSE.md\",\"contentType\":\"file\"},{\"name\":\"README.md\",\"path\":\"README.md\",\"contentType\":\"file\"},{\"name\":\"rationale.md\",\"path\":\"rationale.md\",\"contentType\":\"file\"},{\"name\":\"template.md\",\"path\":\"template.md\",\"contentType\":\"file\"}],\"totalCount\":9}},\"fileTreeProcessingTime\":15.976536,\"foldersToFetch\":[],\"reducedMotionEnabled\":null,\"repo\":{\"id\":208489343,\"defaultBranch\":\"master\",\"name\":\"canvas2D\",\"ownerLogin\":\"fserb\",\"currentUserCanPush\":false,\"isFork\":false,\"isEmpty\":false,\"createdAt\":\"2019-09-14T19:01:09.000Z\",\"ownerAvatar\":\"https://avatars.githubusercontent.com/u/1587?v=4\",\"public\":true,\"private\":false,\"isOrgOwned\":false},\"symbolsExpanded\":false,\"treeExpanded\":true,\"refInfo\":{\"name\":\"master\",\"listCacheKey\":\"v0:1674145196.8261929\",\"canEdit\":false,\"refType\":\"branch\",\"currentOid\":\"ae695258e28b2a6988bf560aaea49fd643700539\"},\"path\":\"spec/mesh2d.md\",\"currentUser\":null,\"blob\":{\"rawLines\":null,\"stylingDirectives\":null,\"csv\":null,\"csvError\":null,\"dependabotInfo\":{\"showConfigurationBanner\":false,\"configFilePath\":null,\"networkDependabotPath\":\"/fserb/canvas2D/network/updates\",\"dismissConfigurationNoticePath\":\"/settings/dismiss-notice/dependabot_configuration_notice\",\"configurationNoticeDismissed\":null,\"repoAlertsPath\":\"/fserb/canvas2D/security/dependabot\",\"repoSecurityAndAnalysisPath\":\"/fserb/canvas2D/settings/security_analysis\",\"repoOwnerIsOrg\":false,\"currentUserCanAdminRepo\":false},\"displayName\":\"mesh2d.md\",\"displayUrl\":\"https://github.com/fserb/canvas2D/blob/master/spec/mesh2d.md?raw=true\",\"headerInfo\":{\"blobSize\":\"7.47 KB\",\"deleteInfo\":{\"deleteTooltip\":\"You must be signed in to make or propose changes\"},\"editInfo\":{\"editTooltip\":\"You must be signed in to make or propose changes\"},\"ghDesktopPath\":\"https://desktop.github.com\",\"gitLfsPath\":null,\"onBranch\":true,\"shortPath\":\"f3a826a\",\"siteNavLoginPath\":\"/login?return_to=https%3A%2F%2Fgithub.com%2Ffserb%2Fcanvas2D%2Fblob%2Fmaster%2Fspec%2Fmesh2d.md\",\"isCSV\":false,\"isRichtext\":true,\"toc\":[{\"level\":1,\"text\":\"Mesh2D\",\"anchor\":\"mesh2d\",\"htmlText\":\"Mesh2D\"},{\"level\":2,\"text\":\"Goals\",\"anchor\":\"goals\",\"htmlText\":\"Goals\"},{\"level\":2,\"text\":\"Rationale\",\"anchor\":\"rationale\",\"htmlText\":\"Rationale\"},{\"level\":2,\"text\":\"Use cases\",\"anchor\":\"use-cases\",\"htmlText\":\"Use cases\"},{\"level\":3,\"text\":\"2D texture mapping\",\"anchor\":\"2d-texture-mapping\",\"htmlText\":\"2D texture mapping\"},{\"level\":3,\"text\":\"2D shape animations\",\"anchor\":\"2d-shape-animations\",\"htmlText\":\"2D shape animations\"},{\"level\":3,\"text\":\"Color/gradient meshes\",\"anchor\":\"colorgradient-meshes\",\"htmlText\":\"Color/gradient meshes\"},{\"level\":3,\"text\":\"3D effect simulation\",\"anchor\":\"3d-effect-simulation\",\"htmlText\":\"3D effect simulation\"},{\"level\":2,\"text\":\"Proposal\",\"anchor\":\"proposal\",\"htmlText\":\"Proposal\"},{\"level\":3,\"text\":\"Mesh2D API\",\"anchor\":\"mesh2d-api\",\"htmlText\":\"Mesh2D API\"},{\"level\":2,\"text\":\"Example usage\",\"anchor\":\"example-usage\",\"htmlText\":\"Example usage\"},{\"level\":3,\"text\":\"Allocating mesh buffers\",\"anchor\":\"allocating-mesh-buffers\",\"htmlText\":\"Allocating mesh buffers\"},{\"level\":3,\"text\":\"Drawing a mesh\",\"anchor\":\"drawing-a-mesh\",\"htmlText\":\"Drawing a mesh\"},{\"level\":2,\"text\":\"Rendering model\",\"anchor\":\"rendering-model\",\"htmlText\":\"Rendering model\"},{\"level\":3,\"text\":\"Draw order\",\"anchor\":\"draw-order\",\"htmlText\":\"Draw order\"},{\"level\":3,\"text\":\"Anti-aliasing\",\"anchor\":\"anti-aliasing\",\"htmlText\":\"Anti-aliasing\"},{\"level\":3,\"text\":\"Global state\",\"anchor\":\"global-state\",\"htmlText\":\"Global state\"},{\"level\":3,\"text\":\"Overlap\",\"anchor\":\"overlap\",\"htmlText\":\"Overlap\"},{\"level\":3,\"text\":\"Triangle interpolation\",\"anchor\":\"triangle-interpolation\",\"htmlText\":\"Triangle interpolation\"},{\"level\":3,\"text\":\"UV coordinates range\",\"anchor\":\"uv-coordinates-range\",\"htmlText\":\"UV coordinates range\"},{\"level\":3,\"text\":\"Triangle winding\",\"anchor\":\"triangle-winding\",\"htmlText\":\"Triangle winding\"},{\"level\":2,\"text\":\"References\",\"anchor\":\"references\",\"htmlText\":\"References\"}],\"lineInfo\":{\"truncatedLoc\":\"186\",\"truncatedSloc\":\"138\"},\"mode\":\"file\"},\"image\":false,\"isCodeownersFile\":null,\"isPlain\":false,\"isValidLegacyIssueTemplate\":false,\"issueTemplateHelpUrl\":\"https://docs.github.com/articles/about-issue-and-pull-request-templates\",\"issueTemplate\":null,\"discussionTemplate\":null,\"language\":\"Markdown\",\"languageID\":222,\"large\":false,\"loggedIn\":false,\"newDiscussionPath\":\"/fserb/canvas2D/discussions/new\",\"newIssuePath\":\"/fserb/canvas2D/issues/new\",\"planSupportInfo\":{\"repoIsFork\":null,\"repoOwnedByCurrentUser\":null,\"requestFullPath\":\"/fserb/canvas2D/blob/master/spec/mesh2d.md\",\"showFreeOrgGatedFeatureMessage\":null,\"showPlanSupportBanner\":null,\"upgradeDataAttributes\":null,\"upgradePath\":null},\"publishBannersInfo\":{\"dismissActionNoticePath\":\"/settings/dismiss-notice/publish_action_from_dockerfile\",\"dismissStackNoticePath\":\"/settings/dismiss-notice/publish_stack_from_file\",\"releasePath\":\"/fserb/canvas2D/releases/new?marketplace=true\",\"showPublishActionBanner\":false,\"showPublishStackBanner\":false},\"rawBlobUrl\":\"https://github.com/fserb/canvas2D/raw/master/spec/mesh2d.md\",\"renderImageOrRaw\":false,\"richText\":\"\\u003carticle class=\\\"markdown-body entry-content container-lg\\\" itemprop=\\\"text\\\"\\u003e\\u003ch1 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-mesh2d\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#mesh2d\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eMesh2D\\u003c/h1\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003e\\u003cstrong\\u003eStatus\\u003c/strong\\u003e: explainer\\u003c/p\\u003e\\n\\u003ch2 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-goals\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#goals\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eGoals\\u003c/h2\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eProvide a simple and high-performance canvas 2D triangle mesh API that can be used to batch-render a large number of textured triangles.\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eOffer full control of the mesh geometry and texture mapping, to support complex effects that require an intentional mesh design (custom topology, variable density, ordering, etc) -- as opposed to auto-generating the mesh.\\u003c/p\\u003e\\n\\u003ch2 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-rationale\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#rationale\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eRationale\\u003c/h2\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eTriangle meshes are a basic building block of most low-level graphics APIs, and their rendering is heavily optimized on modern hardware.  They can represent complex geometries, and provide an efficient mechanism for texture mapping and morphing.\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eMapping textures to arbitrary geometries is of great importance to animation engines (e.g. Lottie, Rive), both as a direct animation mechanism and as an utility for implementing various morphological effects.  Since Canvas2D does not currently support drawing triangle meshes, such animation engines are either resorting to inefficient workarounds or limiting the set of supported features on the web.\\u003c/p\\u003e\\n\\u003ch2 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-use-cases\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#use-cases\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eUse cases\\u003c/h2\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-2d-texture-mapping\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#2d-texture-mapping\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003e2D texture mapping\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eMapping textures to complex 2D shapes is a useful technique for implementing various distortion effects (stretch/compress, fish eye, etc).\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003e\\u003ca target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" href=\\\"/fserb/canvas2D/blob/master/images/mesh2d-deformation.png\\\"\\u003e\\u003cimg src=\\\"/fserb/canvas2D/raw/master/images/mesh2d-deformation.png\\\" alt=\\\"mesh deformation\\\" style=\\\"max-width: 100%;\\\"\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-2d-shape-animations\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#2d-shape-animations\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003e2D shape animations\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eCurrently, shapes can be animated as 2D paths - which offer great geometric accuracy, but very few fill options (solid color, gradients, patterns).\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eMeshes enable natural animation of heavily textured shapes, as they seamlessly translate the geometric transformation to texture space.\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003e\\u003ca target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" href=\\\"/fserb/canvas2D/blob/master/images/mesh2d-twirl.gif\\\"\\u003e\\u003cimg src=\\\"/fserb/canvas2D/raw/master/images/mesh2d-twirl.gif\\\" alt=\\\"mesh animation 1\\\" data-animated-image=\\\"\\\" style=\\\"max-width: 100%;\\\"\\u003e\\u003c/a\\u003e\\n\\u003ca target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" href=\\\"/fserb/canvas2D/blob/master/images/mesh2d-circular.gif\\\"\\u003e\\u003cimg src=\\\"/fserb/canvas2D/raw/master/images/mesh2d-circular.gif\\\" alt=\\\"mesh animation 2\\\" data-animated-image=\\\"\\\" style=\\\"max-width: 100%;\\\"\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-colorgradient-meshes\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#colorgradient-meshes\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eColor/gradient meshes\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eInstead of sampling from a texture, meshes can also use color information assigned to each vertex to generate 2D multi-point gradients.\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003e\\u003ca target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" href=\\\"/fserb/canvas2D/blob/master/images/mesh2d-colors.png\\\"\\u003e\\u003cimg src=\\\"/fserb/canvas2D/raw/master/images/mesh2d-colors.png\\\" alt=\\\"mesh colors\\\" style=\\\"max-width: 100%;\\\"\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-3d-effect-simulation\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#3d-effect-simulation\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003e3D effect simulation\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eWhile a 2D mesh does not offer native support for 3D transformations, it does simplify the emulation of such effects by separating the vertex geometry from texture mapping concerns.\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eClients can easily create 3D-like effects by manipulating a small number (relative to the shape and texture size) of vertices, and then passing them to the 2D drawing API.\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003e\\u003ca target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" href=\\\"/fserb/canvas2D/blob/master/images/mesh2d-cylindrical.gif\\\"\\u003e\\u003cimg src=\\\"/fserb/canvas2D/raw/master/images/mesh2d-cylindrical.gif\\\" alt=\\\"mesh animation 3\\\" data-animated-image=\\\"\\\" style=\\\"max-width: 100%;\\\"\\u003e\\u003c/a\\u003e\\u003c/p\\u003e\\n\\u003ch2 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-proposal\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#proposal\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eProposal\\u003c/h2\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-mesh2d-api\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#mesh2d-api\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eMesh2D API\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eMesh2D is a collection of APIs for drawing 2D meshes and managing mesh-related data.\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eAt a high level, drawing a triangle mesh requires\\u003c/p\\u003e\\n\\u003cul dir=\\\"auto\\\"\\u003e\\n\\u003cli\\u003ea \\u003cstrong\\u003emesh geometry\\u003c/strong\\u003e (vertex positions and triangle topology)\\u003c/li\\u003e\\n\\u003cli\\u003ea \\u003cstrong\\u003etexture source\\u003c/strong\\u003e (images, gradients, colors, patterns, etc)\\u003c/li\\u003e\\n\\u003cli\\u003evertex -\\u0026gt; texture \\u003cstrong\\u003emapping information\\u003c/strong\\u003e (per-vertex uv coordinates or per-vertex colors)\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003cdiv class=\\\"highlight highlight-source-webidl notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"// Describes the mesh geometry (vertex positions), and can be constructed\\n// from a float32 typed array (two floats per vertex).\\n[ Exposed=(Window,Worker,PaintWorklet) ]\\ninterface Mesh2DVertexBuffer {\\n    [CallWith=ScriptState, RaisesException] constructor(Float32Array buffer);\\n};\\n\\n// Describes the mapping of vertices to UV coordinates.  Similar format and\\n// constructor to Mesh2DVertexBuffer.\\ntypedef Mesh2DVertexBuffer Mesh2DUVBuffer;\\n\\n// Describes the mesh topology (triangle grouping), as an array of vertex indices,\\n// three indices per triangle.  Can be constructed from an uint16 or uint32 typed\\n// array. (n.b. these are vertex indices, not float32 indices, in the vertex array)\\n[ Exposed=(Window,Worker,PaintWorklet) ]\\ninterface Mesh2DIndexBuffer {\\n    [CallWith=ScriptState, RaisesException] constructor(Uint16Array buffer);\\n    [CallWith=ScriptState, RaisesException] constructor(Uint32Array buffer);\\n};\\\"\\u003e\\u003cpre\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e Describes the mesh geometry (vertex positions), and can be constructed\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e from a float32 typed array (two floats per vertex).\\u003c/span\\u003e\\n[ \\u003cspan class=\\\"pl-k\\\"\\u003eExposed\\u003c/span\\u003e=(\\u003cspan class=\\\"pl-k\\\"\\u003eWindow\\u003c/span\\u003e,\\u003cspan class=\\\"pl-k\\\"\\u003eWorker\\u003c/span\\u003e,\\u003cspan class=\\\"pl-k\\\"\\u003ePaintWorklet\\u003c/span\\u003e) ]\\n\\u003cspan class=\\\"pl-k\\\"\\u003einterface\\u003c/span\\u003e \\u003cspan class=\\\"pl-en\\\"\\u003eMesh2DVertexBuffer\\u003c/span\\u003e {\\n    [\\u003cspan class=\\\"pl-k\\\"\\u003eCallWith\\u003c/span\\u003e=\\u003cspan class=\\\"pl-k\\\"\\u003eScriptState\\u003c/span\\u003e, \\u003cspan class=\\\"pl-k\\\"\\u003eRaisesException\\u003c/span\\u003e] constructor(Float32Array buffer);\\n};\\n\\n\\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e Describes the mapping of vertices to UV coordinates.  Similar format and\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e constructor to Mesh2DVertexBuffer.\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-k\\\"\\u003etypedef\\u003c/span\\u003e Mesh2DVertexBuffer Mesh2DUVBuffer;\\n\\n\\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e Describes the mesh topology (triangle grouping), as an array of vertex indices,\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e three indices per triangle.  Can be constructed from an uint16 or uint32 typed\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e array. (n.b. these are vertex indices, not float32 indices, in the vertex array)\\u003c/span\\u003e\\n[ \\u003cspan class=\\\"pl-k\\\"\\u003eExposed\\u003c/span\\u003e=(\\u003cspan class=\\\"pl-k\\\"\\u003eWindow\\u003c/span\\u003e,\\u003cspan class=\\\"pl-k\\\"\\u003eWorker\\u003c/span\\u003e,\\u003cspan class=\\\"pl-k\\\"\\u003ePaintWorklet\\u003c/span\\u003e) ]\\n\\u003cspan class=\\\"pl-k\\\"\\u003einterface\\u003c/span\\u003e \\u003cspan class=\\\"pl-en\\\"\\u003eMesh2DIndexBuffer\\u003c/span\\u003e {\\n    [\\u003cspan class=\\\"pl-k\\\"\\u003eCallWith\\u003c/span\\u003e=\\u003cspan class=\\\"pl-k\\\"\\u003eScriptState\\u003c/span\\u003e, \\u003cspan class=\\\"pl-k\\\"\\u003eRaisesException\\u003c/span\\u003e] constructor(Uint16Array buffer);\\n    [\\u003cspan class=\\\"pl-k\\\"\\u003eCallWith\\u003c/span\\u003e=\\u003cspan class=\\\"pl-k\\\"\\u003eScriptState\\u003c/span\\u003e, \\u003cspan class=\\\"pl-k\\\"\\u003eRaisesException\\u003c/span\\u003e] constructor(Uint32Array buffer);\\n};\\u003c/pre\\u003e\\u003c/div\\u003e\\n\\u003cdiv class=\\\"highlight highlight-source-webidl notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"typedef (CanvasImageSource or\\n         CanvasGradient or\\n         CanvasPattern) MeshTextureSource;\\n\\ninterface CanvasRenderingContext2D {\\n    // Triangle mesh using a texture source and UV mapping.\\n    [HighEntropy, RaisesException] void drawMesh(Mesh2DVertexBuffer vertex_buffer,\\n                                                 Mesh2DIndexBuffer  index_buffer,\\n                                                 Mesh2DUVBuffer     uv_buffer,\\n                                                 MeshTextureSource  texture_source);\\n\\n    // Triangle mesh using explicit vertex colors.\\n    [HighEntropy, RaisesException] void drawMesh(Mesh2DVertexBuffer vertex_buffer,\\n                                                 Mesh2DIndexBuffer  index_buffer,\\n                                                 Mesh2DColorBuffer  color_buffer);\\n};\\\"\\u003e\\u003cpre\\u003e\\u003cspan class=\\\"pl-k\\\"\\u003etypedef\\u003c/span\\u003e (CanvasImageSource or\\n         CanvasGradient or\\n         CanvasPattern) MeshTextureSource;\\n\\n\\u003cspan class=\\\"pl-k\\\"\\u003einterface\\u003c/span\\u003e \\u003cspan class=\\\"pl-en\\\"\\u003eCanvasRenderingContext2D\\u003c/span\\u003e {\\n    \\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e Triangle mesh using a texture source and UV mapping.\\u003c/span\\u003e\\n    [\\u003cspan class=\\\"pl-k\\\"\\u003eHighEntropy\\u003c/span\\u003e, \\u003cspan class=\\\"pl-k\\\"\\u003eRaisesException\\u003c/span\\u003e] \\u003cspan class=\\\"pl-k\\\"\\u003evoid\\u003c/span\\u003e \\u003cspan class=\\\"pl-en\\\"\\u003edrawMesh\\u003c/span\\u003e(Mesh2DVertexBuffer vertex_buffer,\\n                                                 Mesh2DIndexBuffer  index_buffer,\\n                                                 Mesh2DUVBuffer     uv_buffer,\\n                                                 MeshTextureSource  texture_source);\\n\\n    \\u003cspan class=\\\"pl-c\\\"\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e//\\u003c/span\\u003e Triangle mesh using explicit vertex colors.\\u003c/span\\u003e\\n    [\\u003cspan class=\\\"pl-k\\\"\\u003eHighEntropy\\u003c/span\\u003e, \\u003cspan class=\\\"pl-k\\\"\\u003eRaisesException\\u003c/span\\u003e] \\u003cspan class=\\\"pl-k\\\"\\u003evoid\\u003c/span\\u003e \\u003cspan class=\\\"pl-en\\\"\\u003edrawMesh\\u003c/span\\u003e(Mesh2DVertexBuffer vertex_buffer,\\n                                                 Mesh2DIndexBuffer  index_buffer,\\n                                                 Mesh2DColorBuffer  color_buffer);\\n};\\u003c/pre\\u003e\\u003c/div\\u003e\\n\\u003ch2 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-example-usage\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#example-usage\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eExample usage\\u003c/h2\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-allocating-mesh-buffers\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#allocating-mesh-buffers\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eAllocating mesh buffers\\u003c/h3\\u003e\\n\\u003cdiv class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"// A trivial 4-vertex, 2-triangle mesh:\\n// 0    1\\n//  *--*\\n//  |\\\\ |\\n//  | \\\\|\\n//  *--*\\n// 3    2\\n\\n// Vertex position buffer: Float32Array, two float32s per vertex.\\nconst vbuf = new Mesh2DVertexBuffer(new Float32Array([\\n    0,   0,\\n   50,   0,\\n   50, 100,\\n    0, 100\\n]));\\n\\n// Index buffer: Uint16Array, 3 uints per triangle.\\nconst ibuf = new Mesh2DIndexBuffer(new Uint16Array([\\n  0, 2, 1,\\n  0, 2, 3\\n]));\\n\\n// Color buffer: four uint8s per vertex, RGBA format.\\nconst cbuf = new Mesh2DColorBuffer(new Uint8ClampedArray([\\n  255,   0,   0, 255,\\n    0, 255,   0, 255,\\n    0,   0, 255, 255,\\n    0,   0,   0, 255\\n]));\\n\\n// UV buffer: Float32Array, two float32s per vertex.\\nconst uvbuf = new Mesh2DUVBuffer(new Float32Array([\\n  0, 0,\\n  1, 0,\\n  1, 1,\\n  0, 1\\n]));\\\"\\u003e\\u003cpre\\u003e\\u003cspan class=\\\"pl-c\\\"\\u003e// A trivial 4-vertex, 2-triangle mesh:\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// 0    1\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e//  *--*\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e//  |\\\\ |\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e//  | \\\\|\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e//  *--*\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// 3    2\\u003c/span\\u003e\\n\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// Vertex position buffer: Float32Array, two float32s per vertex.\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-k\\\"\\u003econst\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003evbuf\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e=\\u003c/span\\u003e \\u003cspan class=\\\"pl-k\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class=\\\"pl-v\\\"\\u003eMesh2DVertexBuffer\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-k\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class=\\\"pl-v\\\"\\u003eFloat32Array\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e[\\u003c/span\\u003e\\n    \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e   \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n   \\u003cspan class=\\\"pl-c1\\\"\\u003e50\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e   \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n   \\u003cspan class=\\\"pl-c1\\\"\\u003e50\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e100\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n    \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e100\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-kos\\\"\\u003e]\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e;\\u003c/span\\u003e\\n\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// Index buffer: Uint16Array, 3 uints per triangle.\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-k\\\"\\u003econst\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003eibuf\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e=\\u003c/span\\u003e \\u003cspan class=\\\"pl-k\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class=\\\"pl-v\\\"\\u003eMesh2DIndexBuffer\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-k\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class=\\\"pl-v\\\"\\u003eUint16Array\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e[\\u003c/span\\u003e\\n  \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e2\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e1\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n  \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e2\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e3\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-kos\\\"\\u003e]\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e;\\u003c/span\\u003e\\n\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// Color buffer: four uint8s per vertex, RGBA format.\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-k\\\"\\u003econst\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003ecbuf\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e=\\u003c/span\\u003e \\u003cspan class=\\\"pl-k\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class=\\\"pl-v\\\"\\u003eMesh2DColorBuffer\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-k\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class=\\\"pl-v\\\"\\u003eUint8ClampedArray\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e[\\u003c/span\\u003e\\n  \\u003cspan class=\\\"pl-c1\\\"\\u003e255\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e   \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e   \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e255\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n    \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e255\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e   \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e255\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n    \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e   \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e255\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e255\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n    \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e   \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e   \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e255\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-kos\\\"\\u003e]\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e;\\u003c/span\\u003e\\n\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// UV buffer: Float32Array, two float32s per vertex.\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-k\\\"\\u003econst\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003euvbuf\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e=\\u003c/span\\u003e \\u003cspan class=\\\"pl-k\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class=\\\"pl-v\\\"\\u003eMesh2DUVBuffer\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-k\\\"\\u003enew\\u003c/span\\u003e \\u003cspan class=\\\"pl-v\\\"\\u003eFloat32Array\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e[\\u003c/span\\u003e\\n  \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n  \\u003cspan class=\\\"pl-c1\\\"\\u003e1\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n  \\u003cspan class=\\\"pl-c1\\\"\\u003e1\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e1\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e\\n  \\u003cspan class=\\\"pl-c1\\\"\\u003e0\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e1\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-kos\\\"\\u003e]\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e;\\u003c/span\\u003e\\u003c/pre\\u003e\\u003c/div\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-drawing-a-mesh\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#drawing-a-mesh\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eDrawing a mesh\\u003c/h3\\u003e\\n\\u003cdiv class=\\\"highlight highlight-source-js notranslate position-relative overflow-auto\\\" dir=\\\"auto\\\" data-snippet-clipboard-copy-content=\\\"const ctx = document.getElementById(\\u0026quot;canvas\\u0026quot;).getContext(\\u0026quot;2d\\u0026quot;);\\n\\n// A color mesh, which does not require a texture.\\nctx.drawMesh(vbuf, ibuf, cbuf);\\n\\n// A textured mesh, using ImageBitmap, HTMLImageElement,\\n// SVGImageElement, OffscreenCanvas, HTMLCanvasElement, VideoFrame,\\n// HTMLVideoElement or CanvasPattern texture sources.\\nctx.drawMesh(vbuf, ibuf, uvbuf, texture_source);\\\"\\u003e\\u003cpre\\u003e\\u003cspan class=\\\"pl-k\\\"\\u003econst\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003ectx\\u003c/span\\u003e \\u003cspan class=\\\"pl-c1\\\"\\u003e=\\u003c/span\\u003e \\u003cspan class=\\\"pl-smi\\\"\\u003edocument\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class=\\\"pl-en\\\"\\u003egetElementById\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-s\\\"\\u003e\\\"canvas\\\"\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class=\\\"pl-en\\\"\\u003egetContext\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-s\\\"\\u003e\\\"2d\\\"\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e;\\u003c/span\\u003e\\n\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// A color mesh, which does not require a texture.\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-s1\\\"\\u003ectx\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class=\\\"pl-en\\\"\\u003edrawMesh\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-s1\\\"\\u003evbuf\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003eibuf\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003ecbuf\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e;\\u003c/span\\u003e\\n\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// A textured mesh, using ImageBitmap, HTMLImageElement,\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// SVGImageElement, OffscreenCanvas, HTMLCanvasElement, VideoFrame,\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-c\\\"\\u003e// HTMLVideoElement or CanvasPattern texture sources.\\u003c/span\\u003e\\n\\u003cspan class=\\\"pl-s1\\\"\\u003ectx\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e.\\u003c/span\\u003e\\u003cspan class=\\\"pl-en\\\"\\u003edrawMesh\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e(\\u003c/span\\u003e\\u003cspan class=\\\"pl-s1\\\"\\u003evbuf\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003eibuf\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003euvbuf\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e,\\u003c/span\\u003e \\u003cspan class=\\\"pl-s1\\\"\\u003etexture_source\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e)\\u003c/span\\u003e\\u003cspan class=\\\"pl-kos\\\"\\u003e;\\u003c/span\\u003e\\u003c/pre\\u003e\\u003c/div\\u003e\\n\\u003ch2 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-rendering-model\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#rendering-model\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eRendering model\\u003c/h2\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eIn order to minimize friction, Mesh2D adheres to the same model as other existing mesh APIs.\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-draw-order\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#draw-order\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eDraw order\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eConceptually, all triangles are rendered individually in the order specified by the index buffer.  In practice, this process is heavily parallelized in hardware.\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-anti-aliasing\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#anti-aliasing\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eAnti-aliasing\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eIn order to avoid interior seaming artifacts, anti-aliasing is always disabled.\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-global-state\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#global-state\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eGlobal state\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eThe render context transformation, clip state, blend mode and opacity are observed when rendering the mesh.\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-overlap\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#overlap\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eOverlap\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eTriangle overlap is allowed, and the behavior is well defined thanks to the deterministic draw order.\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-triangle-interpolation\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#triangle-interpolation\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eTriangle interpolation\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eVertex attributes (UV coordinates and colors) are interpolated across the triangle area using \\u003ca href=\\\"https://tinyurl.com/msjb6f89\\\" rel=\\\"nofollow\\\"\\u003ebarycentric weights\\u003c/a\\u003e.\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-uv-coordinates-range\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#uv-coordinates-range\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eUV coordinates range\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eUV coordinates are normalized ([0..1]) relative to the current texture size.  Extra normal values are clamped.\\u003c/p\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eWhen used in conjunction with a generated texture with an explicit repeat mode (e.g. pattern), UV coordinates are not clamped but are instead tiled based on the specified repeat mode.\\u003c/p\\u003e\\n\\u003ch3 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-triangle-winding\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#triangle-winding\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eTriangle winding\\u003c/h3\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eIn the absence of backface culling provisions, the order of vertices for a given triangle does not matter.\\u003c/p\\u003e\\n\\u003ch2 tabindex=\\\"-1\\\" dir=\\\"auto\\\"\\u003e\\u003ca id=\\\"user-content-references\\\" class=\\\"anchor\\\" aria-hidden=\\\"true\\\" tabindex=\\\"-1\\\" href=\\\"#references\\\"\\u003e\\u003csvg class=\\\"octicon octicon-link\\\" viewBox=\\\"0 0 16 16\\\" version=\\\"1.1\\\" width=\\\"16\\\" height=\\\"16\\\" aria-hidden=\\\"true\\\"\\u003e\\u003cpath d=\\\"m7.775 3.275 1.25-1.25a3.5 3.5 0 1 1 4.95 4.95l-2.5 2.5a3.5 3.5 0 0 1-4.95 0 .751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018 1.998 1.998 0 0 0 2.83 0l2.5-2.5a2.002 2.002 0 0 0-2.83-2.83l-1.25 1.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042Zm-4.69 9.64a1.998 1.998 0 0 0 2.83 0l1.25-1.25a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042l-1.25 1.25a3.5 3.5 0 1 1-4.95-4.95l2.5-2.5a3.5 3.5 0 0 1 4.95 0 .751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018 1.998 1.998 0 0 0-2.83 0l-2.5 2.5a1.998 1.998 0 0 0 0 2.83Z\\\"\\u003e\\u003c/path\\u003e\\u003c/svg\\u003e\\u003c/a\\u003eReferences\\u003c/h2\\u003e\\n\\u003cp dir=\\\"auto\\\"\\u003eSome examples of the same idea outside Canvas:\\u003c/p\\u003e\\n\\u003cul dir=\\\"auto\\\"\\u003e\\n\\u003cli\\u003e\\u003ca href=\\\"https://registry.khronos.org/OpenGL-Refpages/gl4/html/glDrawElements.xhtml\\\" rel=\\\"nofollow\\\"\\u003e\\u003cem\\u003e\\u003ccode\\u003eglDrawElements()\\u003c/code\\u003e\\u003c/em\\u003e\\u003c/a\\u003e in OpenGL.\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003ca href=\\\"https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/vkCmdDrawIndexed.html\\\" rel=\\\"nofollow\\\"\\u003e\\u003cem\\u003e\\u003ccode\\u003evkCmdDrawIndexed()\\u003c/code\\u003e\\u003c/em\\u003e\\u003c/a\\u003e in Vulkan.\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003ca href=\\\"https://developer.apple.com/documentation/modelio/mdlmesh\\\" rel=\\\"nofollow\\\"\\u003e\\u003cem\\u003e\\u003ccode\\u003eMDLMesh\\u003c/code\\u003e\\u003c/em\\u003e\\u003c/a\\u003e in Metal.\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003ca href=\\\"https://api.skia.org/classSkCanvas.html\\\" rel=\\\"nofollow\\\"\\u003e\\u003cem\\u003e\\u003ccode\\u003edrawVertices()\\u003c/code\\u003e\\u003c/em\\u003e and \\u003cem\\u003e\\u003ccode\\u003edrawMesh()\\u003c/code\\u003e\\u003c/em\\u003e\\u003c/a\\u003e in Skia.\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003ca href=\\\"https://api.flutter.dev/flutter/dart-ui/Canvas/drawVertices.html\\\" rel=\\\"nofollow\\\"\\u003e\\u003cem\\u003e\\u003ccode\\u003edrawVertices()\\u003c/code\\u003e\\u003c/em\\u003e\\u003c/a\\u003e in Flutter.\\u003c/li\\u003e\\n\\u003cli\\u003e\\u003ca href=\\\"https://threejs.org/docs/#api/en/objects/Mesh\\\" rel=\\\"nofollow\\\"\\u003e\\u003cem\\u003e\\u003ccode\\u003eMesh\\u003c/code\\u003e\\u003c/em\\u003e\\u003c/a\\u003e in Three.js.\\u003c/li\\u003e\\n\\u003c/ul\\u003e\\n\\u003c/article\\u003e\",\"renderedFileInfo\":null,\"shortPath\":null,\"tabSize\":8,\"topBannersInfo\":{\"overridingGlobalFundingFile\":false,\"globalPreferredFundingPath\":null,\"repoOwner\":\"fserb\",\"repoName\":\"canvas2D\",\"showInvalidCitationWarning\":false,\"citationHelpUrl\":\"https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files\",\"showDependabotConfigurationBanner\":false,\"actionsOnboardingTip\":null},\"truncated\":false,\"viewable\":true,\"workflowRedirectUrl\":null,\"symbols\":{\"timedOut\":false,\"notAnalyzed\":false,\"symbols\":[{\"name\":\"Mesh2D\",\"kind\":\"section_1\",\"identStart\":2,\"identEnd\":8,\"extentStart\":0,\"extentEnd\":7646,\"fullyQualifiedName\":\"Mesh2D\",\"identUtf16\":{\"start\":{\"lineNumber\":0,\"utf16Col\":2},\"end\":{\"lineNumber\":0,\"utf16Col\":8}},\"extentUtf16\":{\"start\":{\"lineNumber\":0,\"utf16Col\":0},\"end\":{\"lineNumber\":186,\"utf16Col\":0}}},{\"name\":\"Goals\",\"kind\":\"section_2\",\"identStart\":36,\"identEnd\":41,\"extentStart\":33,\"extentEnd\":403,\"fullyQualifiedName\":\"Goals\",\"identUtf16\":{\"start\":{\"lineNumber\":4,\"utf16Col\":3},\"end\":{\"lineNumber\":4,\"utf16Col\":8}},\"extentUtf16\":{\"start\":{\"lineNumber\":4,\"utf16Col\":0},\"end\":{\"lineNumber\":9,\"utf16Col\":0}}},{\"name\":\"Rationale\",\"kind\":\"section_2\",\"identStart\":406,\"identEnd\":415,\"extentStart\":403,\"extentEnd\":1066,\"fullyQualifiedName\":\"Rationale\",\"identUtf16\":{\"start\":{\"lineNumber\":9,\"utf16Col\":3},\"end\":{\"lineNumber\":9,\"utf16Col\":12}},\"extentUtf16\":{\"start\":{\"lineNumber\":9,\"utf16Col\":0},\"end\":{\"lineNumber\":14,\"utf16Col\":0}}},{\"name\":\"Use cases\",\"kind\":\"section_2\",\"identStart\":1069,\"identEnd\":1078,\"extentStart\":1066,\"extentEnd\":2353,\"fullyQualifiedName\":\"Use cases\",\"identUtf16\":{\"start\":{\"lineNumber\":14,\"utf16Col\":3},\"end\":{\"lineNumber\":14,\"utf16Col\":12}},\"extentUtf16\":{\"start\":{\"lineNumber\":14,\"utf16Col\":0},\"end\":{\"lineNumber\":42,\"utf16Col\":0}}},{\"name\":\"2D texture mapping\",\"kind\":\"section_3\",\"identStart\":1084,\"identEnd\":1102,\"extentStart\":1080,\"extentEnd\":1298,\"fullyQualifiedName\":\"2D texture mapping\",\"identUtf16\":{\"start\":{\"lineNumber\":16,\"utf16Col\":4},\"end\":{\"lineNumber\":16,\"utf16Col\":22}},\"extentUtf16\":{\"start\":{\"lineNumber\":16,\"utf16Col\":0},\"end\":{\"lineNumber\":21,\"utf16Col\":0}}},{\"name\":\"2D shape animations\",\"kind\":\"section_3\",\"identStart\":1302,\"identEnd\":1321,\"extentStart\":1298,\"extentEnd\":1708,\"fullyQualifiedName\":\"2D shape animations\",\"identUtf16\":{\"start\":{\"lineNumber\":21,\"utf16Col\":4},\"end\":{\"lineNumber\":21,\"utf16Col\":23}},\"extentUtf16\":{\"start\":{\"lineNumber\":21,\"utf16Col\":0},\"end\":{\"lineNumber\":29,\"utf16Col\":0}}},{\"name\":\"Color/gradient meshes\",\"kind\":\"section_3\",\"identStart\":1712,\"identEnd\":1733,\"extentStart\":1708,\"extentEnd\":1916,\"fullyQualifiedName\":\"Color/gradient meshes\",\"identUtf16\":{\"start\":{\"lineNumber\":29,\"utf16Col\":4},\"end\":{\"lineNumber\":29,\"utf16Col\":25}},\"extentUtf16\":{\"start\":{\"lineNumber\":29,\"utf16Col\":0},\"end\":{\"lineNumber\":34,\"utf16Col\":0}}},{\"name\":\"3D effect simulation\",\"kind\":\"section_3\",\"identStart\":1920,\"identEnd\":1940,\"extentStart\":1916,\"extentEnd\":2353,\"fullyQualifiedName\":\"3D effect simulation\",\"identUtf16\":{\"start\":{\"lineNumber\":34,\"utf16Col\":4},\"end\":{\"lineNumber\":34,\"utf16Col\":24}},\"extentUtf16\":{\"start\":{\"lineNumber\":34,\"utf16Col\":0},\"end\":{\"lineNumber\":42,\"utf16Col\":0}}},{\"name\":\"Proposal\",\"kind\":\"section_2\",\"identStart\":2356,\"identEnd\":2364,\"extentStart\":2353,\"extentEnd\":4522,\"fullyQualifiedName\":\"Proposal\",\"identUtf16\":{\"start\":{\"lineNumber\":42,\"utf16Col\":3},\"end\":{\"lineNumber\":42,\"utf16Col\":11}},\"extentUtf16\":{\"start\":{\"lineNumber\":42,\"utf16Col\":0},\"end\":{\"lineNumber\":94,\"utf16Col\":0}}},{\"name\":\"Mesh2D API\",\"kind\":\"section_3\",\"identStart\":2369,\"identEnd\":2379,\"extentStart\":2365,\"extentEnd\":4522,\"fullyQualifiedName\":\"Mesh2D API\",\"identUtf16\":{\"start\":{\"lineNumber\":43,\"utf16Col\":4},\"end\":{\"lineNumber\":43,\"utf16Col\":14}},\"extentUtf16\":{\"start\":{\"lineNumber\":43,\"utf16Col\":0},\"end\":{\"lineNumber\":94,\"utf16Col\":0}}},{\"name\":\"Example usage\",\"kind\":\"section_2\",\"identStart\":4525,\"identEnd\":4538,\"extentStart\":4522,\"extentEnd\":5736,\"fullyQualifiedName\":\"Example usage\",\"identUtf16\":{\"start\":{\"lineNumber\":94,\"utf16Col\":3},\"end\":{\"lineNumber\":94,\"utf16Col\":16}},\"extentUtf16\":{\"start\":{\"lineNumber\":94,\"utf16Col\":0},\"end\":{\"lineNumber\":150,\"utf16Col\":0}}},{\"name\":\"Allocating mesh buffers\",\"kind\":\"section_3\",\"identStart\":4543,\"identEnd\":4566,\"extentStart\":4539,\"extentEnd\":5328,\"fullyQualifiedName\":\"Allocating mesh buffers\",\"identUtf16\":{\"start\":{\"lineNumber\":95,\"utf16Col\":4},\"end\":{\"lineNumber\":95,\"utf16Col\":27}},\"extentUtf16\":{\"start\":{\"lineNumber\":95,\"utf16Col\":0},\"end\":{\"lineNumber\":136,\"utf16Col\":0}}},{\"name\":\"Drawing a mesh\",\"kind\":\"section_3\",\"identStart\":5332,\"identEnd\":5346,\"extentStart\":5328,\"extentEnd\":5736,\"fullyQualifiedName\":\"Drawing a mesh\",\"identUtf16\":{\"start\":{\"lineNumber\":136,\"utf16Col\":4},\"end\":{\"lineNumber\":136,\"utf16Col\":18}},\"extentUtf16\":{\"start\":{\"lineNumber\":136,\"utf16Col\":0},\"end\":{\"lineNumber\":150,\"utf16Col\":0}}},{\"name\":\"Rendering model\",\"kind\":\"section_2\",\"identStart\":5739,\"identEnd\":5754,\"extentStart\":5736,\"extentEnd\":6994,\"fullyQualifiedName\":\"Rendering model\",\"identUtf16\":{\"start\":{\"lineNumber\":150,\"utf16Col\":3},\"end\":{\"lineNumber\":150,\"utf16Col\":18}},\"extentUtf16\":{\"start\":{\"lineNumber\":150,\"utf16Col\":0},\"end\":{\"lineNumber\":177,\"utf16Col\":0}}},{\"name\":\"Draw order\",\"kind\":\"section_3\",\"identStart\":5853,\"identEnd\":5863,\"extentStart\":5849,\"extentEnd\":6027,\"fullyQualifiedName\":\"Draw order\",\"identUtf16\":{\"start\":{\"lineNumber\":153,\"utf16Col\":4},\"end\":{\"lineNumber\":153,\"utf16Col\":14}},\"extentUtf16\":{\"start\":{\"lineNumber\":153,\"utf16Col\":0},\"end\":{\"lineNumber\":156,\"utf16Col\":0}}},{\"name\":\"Anti-aliasing\",\"kind\":\"section_3\",\"identStart\":6031,\"identEnd\":6044,\"extentStart\":6027,\"extentEnd\":6126,\"fullyQualifiedName\":\"Anti-aliasing\",\"identUtf16\":{\"start\":{\"lineNumber\":156,\"utf16Col\":4},\"end\":{\"lineNumber\":156,\"utf16Col\":17}},\"extentUtf16\":{\"start\":{\"lineNumber\":156,\"utf16Col\":0},\"end\":{\"lineNumber\":159,\"utf16Col\":0}}},{\"name\":\"Global state\",\"kind\":\"section_3\",\"identStart\":6130,\"identEnd\":6142,\"extentStart\":6126,\"extentEnd\":6252,\"fullyQualifiedName\":\"Global state\",\"identUtf16\":{\"start\":{\"lineNumber\":159,\"utf16Col\":4},\"end\":{\"lineNumber\":159,\"utf16Col\":16}},\"extentUtf16\":{\"start\":{\"lineNumber\":159,\"utf16Col\":0},\"end\":{\"lineNumber\":162,\"utf16Col\":0}}},{\"name\":\"Overlap\",\"kind\":\"section_3\",\"identStart\":6256,\"identEnd\":6263,\"extentStart\":6252,\"extentEnd\":6367,\"fullyQualifiedName\":\"Overlap\",\"identUtf16\":{\"start\":{\"lineNumber\":162,\"utf16Col\":4},\"end\":{\"lineNumber\":162,\"utf16Col\":11}},\"extentUtf16\":{\"start\":{\"lineNumber\":162,\"utf16Col\":0},\"end\":{\"lineNumber\":165,\"utf16Col\":0}}},{\"name\":\"Triangle interpolation\",\"kind\":\"section_3\",\"identStart\":6371,\"identEnd\":6393,\"extentStart\":6367,\"extentEnd\":6542,\"fullyQualifiedName\":\"Triangle interpolation\",\"identUtf16\":{\"start\":{\"lineNumber\":165,\"utf16Col\":4},\"end\":{\"lineNumber\":165,\"utf16Col\":26}},\"extentUtf16\":{\"start\":{\"lineNumber\":165,\"utf16Col\":0},\"end\":{\"lineNumber\":168,\"utf16Col\":0}}},{\"name\":\"UV coordinates range\",\"kind\":\"section_3\",\"identStart\":6546,\"identEnd\":6566,\"extentStart\":6542,\"extentEnd\":6865,\"fullyQualifiedName\":\"UV coordinates range\",\"identUtf16\":{\"start\":{\"lineNumber\":168,\"utf16Col\":4},\"end\":{\"lineNumber\":168,\"utf16Col\":24}},\"extentUtf16\":{\"start\":{\"lineNumber\":168,\"utf16Col\":0},\"end\":{\"lineNumber\":174,\"utf16Col\":0}}},{\"name\":\"Triangle winding\",\"kind\":\"section_3\",\"identStart\":6869,\"identEnd\":6885,\"extentStart\":6865,\"extentEnd\":6994,\"fullyQualifiedName\":\"Triangle winding\",\"identUtf16\":{\"start\":{\"lineNumber\":174,\"utf16Col\":4},\"end\":{\"lineNumber\":174,\"utf16Col\":20}},\"extentUtf16\":{\"start\":{\"lineNumber\":174,\"utf16Col\":0},\"end\":{\"lineNumber\":177,\"utf16Col\":0}}},{\"name\":\"References\",\"kind\":\"section_2\",\"identStart\":6997,\"identEnd\":7007,\"extentStart\":6994,\"extentEnd\":7646,\"fullyQualifiedName\":\"References\",\"identUtf16\":{\"start\":{\"lineNumber\":177,\"utf16Col\":3},\"end\":{\"lineNumber\":177,\"utf16Col\":13}},\"extentUtf16\":{\"start\":{\"lineNumber\":177,\"utf16Col\":0},\"end\":{\"lineNumber\":186,\"utf16Col\":0}}}]}},\"copilotInfo\":null,\"copilotAccessAllowed\":false,\"csrf_tokens\":{\"/fserb/canvas2D/branches\":{\"post\":\"ZD-8YUlobwrX2uBBIjwA5d3UfOMx8edrIwonwbyleJuDYAtHpAIgreczFVHVL0R9Lir1iTHbl2n14fG8se7hKg\"},\"/repos/preferences\":{\"post\":\"kVXiE9t0WbBTPiquVHhBvouO9IdI6xUfsnWk9XPibArRLVPhyI9aT1ybHkUczJlP7U-acCL9S9Y1tlVzZryoDw\"}}},\"title\":\"canvas2D/spec/mesh2d.md at master · fserb/canvas2D\",\"appPayload\":{\"helpUrl\":\"https://docs.github.com\",\"findFileWorkerPath\":\"/assets-cdn/worker/find-file-worker-32bb159cc57c.js\",\"findInFileWorkerPath\":\"/assets-cdn/worker/find-in-file-worker-ce6d5c15d2a1.js\",\"githubDevUrl\":null,\"enabled_features\":{\"code_nav_ui_events\":false,\"copilot_conversational_ux\":false,\"copilot_conversational_ux_embedding_update\":false,\"copilot_conversational_ux_streaming\":true,\"copilot_popover_file_editor_header\":false,\"copilot_smell_icebreaker_ux\":false}}}      Files master Blame Breadcrumbscanvas2D/spec/mesh2d.mdFiles masterBreadcrumbscanvas2D/spec/mesh2d.md Blame        Latest commitfmalitaFix mesh2d.md typod64d0c4 · HistoryHistory186 lines (138 loc) · 7.47 KB masterBreadcrumbscanvas2D/spec/mesh2d.mdTopFile metadata and controlsPreviewCodeBlame186 lines (138 loc) · 7.47 KBRawMesh2DStatus: explainerGoalsProvide a simple and high-performance canvas 2D triangle mesh API that can be used to batch-render a large number of textured triangles.Offer full control of the mesh geometry and texture mapping, to support complex effects that require an intentional mesh design (custom topology, variable density, ordering, etc) -- as opposed to auto-generating the mesh.RationaleTriangle meshes are a basic building block of most low-level graphics APIs, and their rendering is heavily optimized on modern hardware.  They can represent complex geometries, and provide an efficient mechanism for texture mapping and morphing.Mapping textures to arbitrary geometries is of great importance to animation engines (e.g. Lottie, Rive), both as a direct animation mechanism and as an utility for implementing various morphological effects.  Since Canvas2D does not currently support drawing triangle meshes, such animation engines are either resorting to inefficient workarounds or limiting the set of supported features on the web.Use cases2D texture mappingMapping textures to complex 2D shapes is a useful technique for implementing various distortion effects (stretch/compress, fish eye, etc).2D shape animationsCurrently, shapes can be animated as 2D paths - which offer great geometric accuracy, but very few fill options (solid color, gradients, patterns).Meshes enable natural animation of heavily textured shapes, as they seamlessly translate the geometric transformation to texture spaceolor/gradient meshesInstead of sampling from a texture, meshes can also use color information assigned to each vertex to generate 2D multi-point gradients.3D effect simulationWhile a 2D mesh does not offer native support for 3D transformations, it does simplify the emulation of such effects by separating the vertex geometry from texture mapping concerns.Clients can easily create 3D-like effects by manipulating a small number (relative to the shape and texture size) of vertices, and then passing them to the 2D drawing API.                                                                                                                                                                                                                                                            ProposalMesh2D APIMesh2D is a collection of APIs for drawing 2D meshes and managing mesh-related data.At a high level, drawing a triangle mesh requiresa mesh geometry (vertex positions and triangle topology)a texture source (images, gradients, colors, patterns, etc)vertex -> texture mapping information (per-vertex uv coordinates or per-vertex colors)// Describes the mesh geometry (vertex positions), and can be constructed// from a float32 typed array (two floats per vertex).[ Exposed=(Window,Worker,PaintWorklet) ]interface Mesh2DVertexBuffer {    [CallWith=ScriptState, RaisesException] constructor(Float32Array buffer);};// Describes the mapping of vertices to UV coordinates.  Similar format and// constructor to Mesh2DVertexBuffer.typedef Mesh2DVertexBuffer Mesh2DUVBuffer;// Describes the mesh topology (triangle grouping), as an array of vertex indices,// three indices per triangle.  Can be constructed from an uint16 or uint32 typed// array. (n.b. these are vertex indices, not float32 indices, in the vertex array)[ Exposed=(Window,Worker,PaintWorklet) ]interface Mesh2DIndexBuffer {    [CallWith=ScriptState, RaisesException] constructor(Uint16Array buffer);    [CallWith=ScriptState, RaisesException] constructor(Uint32Array buffer);};                              typedef (CanvasImageSource or         CanvasGradient or         CanvasPattern) MeshTextureSource;interface CanvasRenderingContext2D {    // Triangle mesh using a texture source and UV mapping.    [HighEntropy, RaisesException] void drawMesh(Mesh2DVertexBuffer vertex_buffer,                                                 Mesh2DIndexBuffer  index_buffer,                                                 Mesh2DUVBuffer     uv_buffer,                                                 MeshTextureSource  texture_source);    // Triangle mesh using explicit vertex colors.    [HighEntropy, RaisesException] void drawMesh(Mesh2DVertexBuffer vertex_buffer,                                                 Mesh2DIndexBuffer  index_buffer,                                                 Mesh2DColorBuffer  color_buffer);};                              Example usageAllocating mesh buffers// A trivial 4-vertex, 2-triangle mesh:// 0    1//  *--*//  |\\ |//  | \\|//  *--*// 3    2// Vertex position buffer: Float32Array, two float32s per vertex.const vbuf = new Mesh2DVertexBuffer(new Float32Array([    0,   0,   50,   0,   50, 100,    0, 100]));// Index buffer: Uint16Array, 3 uints per triangle.const ibuf = new Mesh2DIndexBuffer(new Uint16Array([  0, 2, 1,  0, 2, 3]));// Color buffer: four uint8s per vertex, RGBA format.const cbuf = new Mesh2DColorBuffer(new Uint8ClampedArray([  255,   0,   0, 255,    0, 255,   0, 255,    0,   0, 255, 255,    0,   0,   0, 255]));// UV buffer: Float32Array, two float32s per vertex.const uvbuf = new Mesh2DUVBuffer(new Float32Array([  0, 0,  1, 0,  1, 1,  0, 1]));                              Drawing a meshconst ctx = document.getElementById(\"canvas\").getContext(\"2d\");// A color mesh, which does not require a texture.ctx.drawMesh(vbuf, ibuf, cbuf);// A textured mesh, using ImageBitmap, HTMLImageElement,// SVGImageElement, OffscreenCanvas, HTMLCanvasElement, VideoFrame,// HTMLVideoElement or CanvasPattern texture sources.ctx.drawMesh(vbuf, ibuf, uvbuf, texture_source);                              Rendering modelIn order to minimize friction, Mesh2D adheres to the same model as other existing mesh APIs.Draw orderConceptually, all triangles are rendered individually in the order specified by the index buffer.  In practice, this process is heavily parallelized in hardware.Anti-aliasingIn order to avoid interior seaming artifacts, anti-aliasing is always disabled.Global stateThe render context transformation, clip state, blend mode and opacity are observed when rendering the mesh.OverlapTriangle overlap is allowed, and the behavior is well defined thanks to the deterministic draw order.Triangle interpolationVertex attributes (UV coordinates and colors) are interpolated across the triangle area using barycentric weights.UV coordinates rangeUV coordinates are normalized ([0..1]) relative to the current texture size.  Extra normal values are clamped.When used in conjunction with a generated texture with an explicit repeat mode (e.g. pattern), UV coordinates are not clamped but are instead tiled based on the specified repeat mode.Triangle windingIn the absence of backface culling provisions, the order of vertices for a given triangle does not matter.ReferencesSome examples of the same idea outside Canvas:glDrawElements() in OpenGL.vkCmdDrawIndexed() in Vulkan.MDLMesh in Metal.drawVertices() and drawMesh() in Skia.drawVertices() in Flutter.Mesh in Three.js.       {\"resolvedServerColorMode\":\"day\"}                      Footer                                      © 2023 GitHub, Inc.                    Footer navigation                            Terms                                Privacy                                Security                                Status                                Docs                                Contact                                    {\"props\":{\"cookieConsentRequired\":true,\"initialCookieConsentAllowed\":null}}  Manage cookiesDo not share my personal information{\"resolvedServerColorMode\":\"day\"}                                                      You can’t perform that action at this time.                               ",
      "          Fetching CanvasKit...                          Show mesh      Level of detail      Animator      Renderer                                                    4x4          8x8          16x16          32x32          64x64          128x128          255x255                                      Manual          Squircle          Twirl          Wiggle          Cylinder                                      CanvasKit (polyfill)          Canvas2D (native)                      class MeshData {    constructor(size, renderer) {      const vertex_count = size*size;      // 2 floats per point      this.verts          = new Float32Array(vertex_count*2);      this.animated_verts = new Float32Array(vertex_count*2);      this.uvs            = new Float32Array(vertex_count*2);      let i = 0;      for (let y = 0; y < size; ++y) {        for (let x = 0; x < size; ++x) {          // To keep things simple, all vertices are normalized.          this.verts[i + 0] = this.uvs[i + 0] = x / (size - 1);          this.verts[i + 1] = this.uvs[i + 1] = y / (size - 1);          i += 2;        }      }      // 2 triangles per LOD square, 3 indices per triangle      this.indices = new Uint16Array((size - 1)*(size - 1)*6);      i = 0;      for (let y = 0; y < size - 1; ++y) {        for (let x = 0; x < size - 1; ++x) {          const vidx0 = x + y*size;          const vidx1 = vidx0 + size;          this.indices[i++] = vidx0;          this.indices[i++] = vidx0 + 1;          this.indices[i++] = vidx1 + 1;          this.indices[i++] = vidx0;          this.indices[i++] = vidx1;          this.indices[i++] = vidx1 + 1;        }      }      // These can be cached upfront (constant during animation).      this.uvBuffer    = renderer.makeUVBuffer(this.uvs);      this.indexBuffer = renderer.makeIndexBuffer(this.indices);    }    animate(animator) {      function bezier(t, p0, p1, p2, p3){        return (1 - t)*(1 - t)*(1 - t)*p0 +                   3*(1 - t)*(1 - t)*t*p1 +                         3*(1 - t)*t*t*p2 +                                 t*t*t*p3;      }      // Tuned for non-linear transition.      function ease(t) { return bezier(t, 0, 0.4, 1, 1); }      if (!animator) {        return;      }      const ms = Date.now() - timeBase;      const  t = Math.abs((ms / 1000) % 2 - 1);      animator(this.verts, this.animated_verts, t);    }    generateTriangles(func) {      for (let i = 0; i < this.indices.length; i += 3) {        const i0 = 2*this.indices[i + 0];        const i1 = 2*this.indices[i + 1];        const i2 = 2*this.indices[i + 2];        func(this.animated_verts[i0 + 0], this.animated_verts[i0 + 1],             this.animated_verts[i1 + 0], this.animated_verts[i1 + 1],             this.animated_verts[i2 + 0], this.animated_verts[i2 + 1]);      }    }  }  class PatchControls {    constructor() {      this.controls = [        { pos: [ 0.00, 0.33], color: '#0ff', deps: []      },        { pos: [ 0.00, 0.00], color: '#0f0', deps: [0, 2]  },        { pos: [ 0.33, 0.00], color: '#0ff', deps: []      },        { pos: [ 0.66, 0.00], color: '#0ff', deps: []      },        { pos: [ 1.00, 0.00], color: '#0f0', deps: [3, 5]  },        { pos: [ 1.00, 0.33], color: '#0ff', deps: []      },        { pos: [ 1.00, 0.66], color: '#0ff', deps: []      },        { pos: [ 1.00, 1.00], color: '#0f0', deps: [6, 8]  },        { pos: [ 0.66, 1.00], color: '#0ff', deps: []      },        { pos: [ 0.33, 1.00], color: '#0ff', deps: []      },        { pos: [ 0.00, 1.00], color: '#0f0', deps: [9, 11] },        { pos: [ 0.00, 0.66], color: '#0ff', deps: []      },      ];      this.radius = 0.01;      this.drag_target = null;    }    mapMouse(ev) {      const w = canvas2d.width,            h = canvas2d.height;      return [        (ev.offsetX - w*(1 - meshScale)*0.5)/(w*meshScale),        (ev.offsetY - h*(1 - meshScale)*0.5)/(h*meshScale),      ];    }    onMouseDown(ev) {      const mouse_pos = this.mapMouse(ev);      for (let i = this.controls.length - 1; i >= 0; --i) {        const dx = this.controls[i].pos[0] - mouse_pos[0],              dy = this.controls[i].pos[1] - mouse_pos[1];        if (dx*dx + dy*dy <= this.radius*this.radius) {          this.drag_target = this.controls[i];          this.drag_offset = [dx, dy];          break;        }      }    }    onMouseMove(ev) {      if (!this.drag_target) return;      const mouse_pos = this.mapMouse(ev),                   dx = mouse_pos[0] + this.drag_offset[0] - this.drag_target.pos[0],                   dy = mouse_pos[1] + this.drag_offset[1] - this.drag_target.pos[1];      this.drag_target.pos = [ this.drag_target.pos[0] + dx, this.drag_target.pos[1] + dy ];      for (let dep_index of this.drag_target.deps) {        const dep = this.controls[dep_index];        dep.pos = [ dep.pos[0] + dx, dep.pos[1] + dy ];      }      this.updateVerts();    }    onMouseUp(ev) {      this.drag_target = null;    }    updateVerts() {      this.samplePatch(parseInt(lodSelectUI.value), meshData.animated_verts);    }    drawUI(line_func, circle_func) {      for (let i = 0; i < this.controls.length; i += 3) {        const c0 = this.controls[i + 0],              c1 = this.controls[i + 1],              c2 = this.controls[i + 2];        line_func(c0.pos, c1.pos, '#f00');        line_func(c1.pos, c2.pos, '#f00');        circle_func(c0.pos, this.radius, c0.color);        circle_func(c1.pos, this.radius, c1.color);        circle_func(c2.pos, this.radius, c2.color);      }    }    // Based on https://github.com/google/skia/blob/de56f293eb41d65786b9e6224fdf9a4702b30f51/src/utils/SkPatchUtils.cpp#L84    sampleCubic(cind, lod) {      const divisions = lod - 1,                    h = 1/divisions,                   h2 = h*h,                   h3 = h*h2,                  pts = [                          this.controls[cind[0]].pos,                          this.controls[cind[1]].pos,                          this.controls[cind[2]].pos,                          this.controls[cind[3]].pos,                        ],               coeffs = [                          [                            pts[3][0] + 3*(pts[1][0] - pts[2][0]) - pts[0][0],                            pts[3][1] + 3*(pts[1][1] - pts[2][1]) - pts[0][1],                          ],                          [                            3*(pts[2][0] - 2*pts[1][0] + pts[0][0]),                            3*(pts[2][1] - 2*pts[1][1] + pts[0][1]),                          ],                          [                            3*(pts[1][0] - pts[0][0]),                            3*(pts[1][1] - pts[0][1]),                          ],                          pts[0],                        ],              fwDiff3 = [                          6*h3*coeffs[0][0],                          6*h3*coeffs[0][1],                        ];      let fwDiff = [                     coeffs[3],                     [                       h3*coeffs[0][0] + h2*coeffs[1][0] + h*coeffs[2][0],                       h3*coeffs[0][1] + h2*coeffs[1][1] + h*coeffs[2][1],                     ],                     [                       fwDiff3[0] + 2*h2*coeffs[1][0],                       fwDiff3[1] + 2*h2*coeffs[1][1],                     ],                     fwDiff3,                   ];      let verts = [];      for (let i = 0; i <= divisions; ++i) {        verts.push(fwDiff[0]);        fwDiff[0] = [ fwDiff[0][0] + fwDiff[1][0], fwDiff[0][1] + fwDiff[1][1] ];        fwDiff[1] = [ fwDiff[1][0] + fwDiff[2][0], fwDiff[1][1] + fwDiff[2][1] ];        fwDiff[2] = [ fwDiff[2][0] + fwDiff[3][0], fwDiff[2][1] + fwDiff[3][1] ];      }      return verts;    }    // Based on https://github.com/google/skia/blob/de56f293eb41d65786b9e6224fdf9a4702b30f51/src/utils/SkPatchUtils.cpp#L256    samplePatch(lod, verts) {      const top_verts = this.sampleCubic([  1,  2,  3,  4 ], lod),          right_verts = this.sampleCubic([  4,  5,  6,  7 ], lod),         bottom_verts = this.sampleCubic([ 10,  9,  8,  7 ], lod),           left_verts = this.sampleCubic([  1,  0, 11, 10 ], lod);      let i = 0;      for (let y = 0; y < lod; ++y) {        const v = y/(lod - 1),           left = left_verts[y],          right = right_verts[y];        for (let x = 0; x < lod; ++x) {          const u = x/(lod - 1),              top = top_verts[x],           bottom = bottom_verts[x],               s0 = [                      (1 - v)*top[0] + v*bottom[0],                      (1 - v)*top[1] + v*bottom[1],                    ],               s1 = [                      (1 - u)*left[0] + u*right[0],                      (1 - u)*left[1] + u*right[1],                    ],               s2 = [                      (1 - v)*((1 - u)*this.controls[ 1].pos[0] + u*this.controls[4].pos[0]) +                            v*((1 - u)*this.controls[10].pos[0] + u*this.controls[7].pos[0]),                      (1 - v)*((1 - u)*this.controls[ 1].pos[1] + u*this.controls[4].pos[1]) +                            v*((1 - u)*this.controls[10].pos[1] + u*this.controls[7].pos[1]),                    ];          verts[i++] = s0[0] + s1[0] - s2[0];          verts[i++] = s0[1] + s1[1] - s2[1];        }      }    }  }  class CKRenderer {    constructor(ck, img, canvasElement) {      this.ck = ck;      this.surface = ck.MakeCanvasSurface(canvasElement);      this.meshPaint = new ck.Paint();      // UVs are normalized, so we scale the image shader down to 1x1.      const skimg = ck.MakeImageFromCanvasImageSource(img);      const localMatrix = [1/skimg.width(),  0, 0,                           0, 1/skimg.height(), 0,                           0,                0, 1];      this.meshPaint.setShader(skimg.makeShaderOptions(ck.TileMode.Decal,                                                       ck.TileMode.Decal,                                                       ck.FilterMode.Linear,                                                       ck.MipmapMode.None,                                                       localMatrix));      this.gridPaint = new ck.Paint();      this.gridPaint.setColor(ck.BLUE);      this.gridPaint.setAntiAlias(true);      this.gridPaint.setStyle(ck.PaintStyle.Stroke);      this.controlsPaint = new ck.Paint();      this.controlsPaint.setAntiAlias(true);      this.controlsPaint.setStyle(ck.PaintStyle.Fill);    }    // Unlike the native renderer, CK drawVertices() takes typed arrays directly - so    // we don't need to allocate separate buffers.    makeVertexBuffer(buf) { return buf; }    makeUVBuffer    (buf) { return buf; }    makeIndexBuffer (buf) { return buf; }    meshPath(mesh) {      // 4 commands per triangle, 3 floats per cmd      const cmds = new Float32Array(mesh.indices.length*12);      let ci = 0;      mesh.generateTriangles((x0, y0, x1, y1, x2, y2) => {        cmds[ci++] = this.ck.MOVE_VERB; cmds[ci++] = x0; cmds[ci++] = y0;        cmds[ci++] = this.ck.LINE_VERB; cmds[ci++] = x1; cmds[ci++] = y1;        cmds[ci++] = this.ck.LINE_VERB; cmds[ci++] = x2; cmds[ci++] = y2;        cmds[ci++] = this.ck.LINE_VERB; cmds[ci++] = x0; cmds[ci++] = y0;      });      return this.ck.Path.MakeFromCmds(cmds);    }    drawMesh(mesh, ctrls) {      const vertices = this.ck.MakeVertices(this.ck.VertexMode.Triangles,                                            this.makeVertexBuffer(mesh.animated_verts),                                            mesh.uvBuffer, null, mesh.indexBuffer, false);      const canvas = this.surface.getCanvas();      const w = this.surface.width(),            h = this.surface.height();      canvas.save();        canvas.translate(w*(1-meshScale)*0.5, h*(1-meshScale)*0.5);        canvas.scale(w*meshScale, h*meshScale);        canvas.drawVertices(vertices, this.ck.BlendMode.Dst, this.meshPaint);        if (showMeshUI.checked) {          canvas.drawPath(this.meshPath(mesh), this.gridPaint);        }        ctrls?.drawUI(            (p0, p1, color) => {                this.controlsPaint.setColor(this.ck.parseColorString(color));                canvas.drawLine(p0[0], p0[1], p1[0], p1[1], this.controlsPaint);            },            (c, r, color) => {                this.controlsPaint.setColor(this.ck.parseColorString(color));                canvas.drawCircle(c[0], c[1], r, this.controlsPaint);            }        );      canvas.restore();      this.surface.flush();    }  }  class NativeRenderer {    constructor(img, canvasElement) {      this.img = img;      this.ctx = canvasElement.getContext(\"2d\");    }    // New Mesh2D API: https://github.com/fserb/canvas2D/blob/master/spec/mesh2d.md#mesh2d-api    makeVertexBuffer(buf) { return new Mesh2DVertexBuffer(buf); }    makeUVBuffer(buf) {        // Temp workaround for lack of uv normalization support in the current prototype.        for (let i = 0; i < buf.length; i+= 2) {          buf[i + 0] *= this.img.width;          buf[i + 1] *= this.img.height;        }        return new Mesh2DVertexBuffer(buf);    }    makeIndexBuffer(buf)  { return new Mesh2DIndexBuffer(buf); }    meshPath(mesh) {      const path = new Path2D();      mesh.generateTriangles((x0, y0, x1, y1, x2, y2) => {        path.moveTo(x0, y0);        path.lineTo(x1, y1);        path.lineTo(x2, y2);        path.lineTo(x0, y0);      });      return path;    }    drawMesh(mesh, ctrls) {      const vbuf = new Mesh2DVertexBuffer(mesh.animated_verts);      const w = canvas2d.width,            h = canvas2d.height;      this.ctx.clearRect(0, 0, canvas2d.width, canvas2d.height);      this.ctx.save();        this.ctx.translate(w*(1-meshScale)*0.5, h*(1-meshScale)*0.5);        this.ctx.scale(w*meshScale, h*meshScale);        this.ctx.drawMesh(vbuf, mesh.uvBuffer, mesh.indexBuffer, this.img);        if (showMeshUI.checked) {          this.ctx.strokeStyle = \"blue\";          this.ctx.lineWidth = 0.001;          this.ctx.stroke(this.meshPath(mesh));        }        ctrls?.drawUI(            (p0, p1, color) => {                this.ctx.lineWidth = 0.001;                this.ctx.strokeStyle = color;                this.ctx.beginPath();                this.ctx.moveTo(p0[0], p0[1]);                this.ctx.lineTo(p1[0], p1[1]);                this.ctx.stroke();            },            (c, r, color) => {                this.ctx.fillStyle = color;                this.ctx.beginPath();                this.ctx.arc(c[0], c[1], r, 0, 2*Math.PI);                this.ctx.fill();            }        );      this.ctx.restore();    }  }  function squircleAnimator(verts, animated_verts, t) {    function lerp(a, b, t) { return a + t*(b - a); }    for (let i = 0; i < verts.length; i += 2) {      const uvx = verts[i + 0] - 0.5,            uvy = verts[i + 1] - 0.5,              d = Math.sqrt(uvx*uvx + uvy*uvy)*0.5/Math.max(Math.abs(uvx), Math.abs(uvy)),              s = d > 0 ? lerp(1, (0.5/ d), t) : 1;      animated_verts[i + 0] = uvx*s + 0.5;      animated_verts[i + 1] = uvy*s + 0.5;    }  }  function twirlAnimator(verts, animated_verts, t) {    const kMaxRotate = Math.PI*4;    for (let i = 0; i < verts.length; i += 2) {      const uvx = verts[i + 0] - 0.5,            uvy = verts[i + 1] - 0.5,              r = Math.sqrt(uvx*uvx + uvy*uvy),              a = kMaxRotate * r * t;      animated_verts[i + 0] = uvx*Math.cos(a) - uvy*Math.sin(a) + 0.5;      animated_verts[i + 1] = uvy*Math.cos(a) + uvx*Math.sin(a) + 0.5;    }  }  function wiggleAnimator(verts, animated_verts, t) {    const radius = t*0.2/(Math.sqrt(verts.length/2) - 1);    for (let i = 0; i < verts.length; i += 2) {      const phase = i*Math.PI*0.1505;      const angle = phase + t*Math.PI*2;      animated_verts[i + 0] = verts[i + 0] + radius*Math.cos(angle);      animated_verts[i + 1] = verts[i + 1] + radius*Math.sin(angle);    }  }  function cylinderAnimator(verts, animated_verts, t) {    const kCylRadius = .2;    const cyl_pos = t;    for (let i = 0; i < verts.length; i += 2) {      const uvx = verts[i + 0],            uvy = verts[i + 1];      if (uvx <= cyl_pos) {        animated_verts[i + 0] = uvx;        animated_verts[i + 1] = uvy;        continue;      }      const arc_len = uvx - cyl_pos,            arc_ang = arc_len/kCylRadius;      animated_verts[i + 0] = cyl_pos + Math.sin(arc_ang)*kCylRadius;      animated_verts[i + 1] = uvy;    }  }  function drawFrame() {    meshData.animate(animator);    currentRenderer.drawMesh(meshData, patchControls);    requestAnimationFrame(drawFrame);  }  function switchRenderer(renderer) {    currentRenderer = renderer;    meshData = new MeshData(parseInt(lodSelectUI.value), currentRenderer);    const showCanvas = renderer == ckRenderer ? canvas3d : canvas2d;    const hideCanvas = renderer == ckRenderer ? canvas2d : canvas3d;    showCanvas.style.display = 'block';    hideCanvas.style.display = 'none';    patchControls?.updateVerts();  }  const canvas2d = document.getElementById(\"canvas2d\");  const canvas3d = document.getElementById(\"canvas3d\");  const hasMesh2DAPI = 'drawMesh' in CanvasRenderingContext2D.prototype;  const showMeshUI = document.getElementById(\"show_mesh\");  const lodSelectUI = document.getElementById(\"lod\");  const animatorSelectUI = document.getElementById(\"animator\");  const rendererSelectUI = document.getElementById(\"renderer\");  const meshScale = 0.75;  const loadCK = CanvasKitInit({ locateFile: (file) => 'https://demos.skia.org/demo/mesh2d/' + file });  const loadImage = new Promise(resolve => {    const image = new Image();    image.addEventListener('load', () => { resolve(image); });    image.src = 'baby_tux.png';  });  var ckRenderer;  var nativeRenderer;  var currentRenderer;  var meshData;  var image;  const timeBase = Date.now();  var animator = window[animatorSelectUI.value];  var patchControls = animator ? null : new PatchControls();  Promise.all([loadCK, loadImage]).then(([ck, img]) => {    ckRenderer = new CKRenderer(ck, img, canvas3d);    nativeRenderer = 'drawMesh' in CanvasRenderingContext2D.prototype        ? new NativeRenderer(img, canvas2d)        : null;    rendererSelectUI.disabled = !nativeRenderer;    rendererSelectUI.value = nativeRenderer ? \"nativeRenderer\" : \"ckRenderer\";    document.getElementById('loader').style.display = 'none';    switchRenderer(nativeRenderer ? nativeRenderer : ckRenderer);    requestAnimationFrame(drawFrame);  });  lodSelectUI.onchange      = () => { switchRenderer(currentRenderer); }  rendererSelectUI.onchange = () => { switchRenderer(window[rendererSelectUI.value]); }  animatorSelectUI.onchange = () => {    animator = window[animatorSelectUI.value];    patchControls = animator ? null : new PatchControls();    patchControls?.updateVerts();  }  const cwrapper = document.getElementById('canvas_wrapper');  cwrapper.onmousedown = (ev) => { patchControls?.onMouseDown(ev); }  cwrapper.onmousemove = (ev) => { patchControls?.onMouseMove(ev); }  cwrapper.onmouseup   = (ev) => { patchControls?.onMouseUp(ev); }"
    ]
  }
]